ds = runif(100)
alpha = -1
beta = 0.3
plot(c(0,10), c(0,600), cex=0)
for(i in 1:100){
times = c(0)
while(max(times) < 10){
t = rexp(1, rate = length(times)*exp(alpha + beta*ds[i]))
times = c(times, t+times[length(times)])
}
for(j in 2:length(times)){
lines(times[(j-1):j], c(j-1,j-1))
lines(rep(times[j],2), c(j-1,j))
}
}
plot(c(0,10), c(0,500), cex=0)
for(i in 1:100){
times = c(0)
while(max(times) < 10){
t = rexp(1, rate = length(times)*exp(alpha + beta*ds[i]))
times = c(times, t+times[length(times)])
}
for(j in 2:length(times)){
lines(times[(j-1):j], c(j-1,j-1))
lines(rep(times[j],2), c(j-1,j))
}
}
plot(c(0,10), c(0,550), cex=0)
for(i in 1:100){
times = c(0)
while(max(times) < 10){
t = rexp(1, rate = length(times)*exp(alpha + beta*ds[i]))
times = c(times, t+times[length(times)])
}
for(j in 2:length(times)){
lines(times[(j-1):j], c(j-1,j-1))
lines(rep(times[j],2), c(j-1,j))
}
}
plot(c(0,10), c(0,600), cex=0)
for(i in 1:100){
times = c(0)
while(max(times) < 10){
t = rexp(1, rate = length(times)*exp(alpha + beta*ds[i]))
times = c(times, t+times[length(times)])
}
for(j in 2:length(times)){
lines(times[(j-1):j], c(j-1,j-1))
lines(rep(times[j],2), c(j-1,j))
}
}
plot(c(0,10), c(0,550), cex=0)
for(i in 1:100){
times = c(0)
while(max(times) < 10){
t = rexp(1, rate = length(times)*exp(alpha + beta*ds[i]))
times = c(times, t+times[length(times)])
}
for(j in 2:length(times)){
lines(times[(j-1):j], c(j-1,j-1))
lines(rep(times[j],2), c(j-1,j))
}
}
ds = runif(100)
alpha = -1
beta = 0.3
finalx = c()
plot(c(0,10), c(0,550), cex=0)
for(i in 1:100){
times = c(0)
while(max(times) < 10){
t = rexp(1, rate = length(times)*exp(alpha + beta*ds[i]))
times = c(times, t+times[length(times)])
}
for(j in 2:length(times)){
lines(times[(j-1):j], c(j-1,j-1))
lines(rep(times[j],2), c(j-1,j))
}
finalx = c(finalx, length(times))
}
finalx
hist(finalx)
hist(finalx, breaks=20)
ds = runif(100)
alpha = -1
beta = 0.3
finalx = c()
plot(c(0,10), c(0,550), cex=0)
for(i in 1:100){
times = c(0)
while(max(times) < 10){
t = rexp(1, rate = length(times)*exp(alpha + beta*ds[i]))
times = c(times, t+times[length(times)])
}
for(j in 2:length(times)){
lines(times[(j-1):j], c(j-1,j-1))
lines(rep(times[j],2), c(j-1,j))
}
finalx = c(finalx, length(times))
}
alpha = -1
beta = 0.3
yulecell = function(d){
times = c(0)
while(max(times) < 10){
t = rexp(1, rate = length(times)*exp(alpha + beta*d))
times = c(times, t+times[length(times)])
}
return(list(tms = times))
}
#2b
library(parallel)
output = mclapply(ds, yulecell, mc.cores = 8)
plot(c(0,10), c(0,550), cex=0)
for(op in output){
for(j in 2:length(op$tms)){
lines(op$tms[(j-1):j], c(j-1,j-1))
lines(rep(op$tms[j],2), c(j-1,j))
}
}
plot(c(0,10), c(0,350), cex=0)
for(op in output){
for(j in 2:length(op$tms)){
lines(op$tms[(j-1):j], c(j-1,j-1))
lines(rep(op$tms[j],2), c(j-1,j))
}
}
plot(c(0,10), c(0,350), cex=0)
finalx = c()
for(op in output){
for(j in 2:length(op$tms)){
lines(op$tms[(j-1):j], c(j-1,j-1))
lines(rep(op$tms[j],2), c(j-1,j))
}
finalx = c(finalx, length(op$tms))
}
finalx
draw1 = rexp(2, rate = alpha)
############################################################
alpha=1
beta=1
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1 = times2 = rep(NA, 100)
for(i in 1:length(times1)){
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1[i] = T1
times2[i] = T2
}
sum(times1 < times2)
expfunc = function(t){
return(0.5*(1 - exp(-2*alpha*t) + t -
(1 - exp(-t*(alpha+beta)))/(alpha+beta)))
}
mean(times1)
hist(times1)
expfunc(1)
sum(times1 < 1)/length(times1)
tgrid = seq(min(times1), max(times1), length.out = 1000)
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times))
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times1))
plot(tgrid, Et)
lines(tgrid, expfunc(tgrid), col=2)
times1 = times2 = rep(NA, 1000)
for(i in 1:length(times1)){
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1[i] = T1
times2[i] = T2
}
tgrid = seq(min(times1), max(times1), length.out = 1000)
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times1))
plot(tgrid, Et)
lines(tgrid, expfunc(tgrid), col=2)
plot(tgrid, expfunc(tgrid), col=2)
expfunc = function(t){
return(0.5*(1 - exp(-2*alpha*t) - # + t -
(1 - exp(-t*(alpha+beta)))/(alpha+beta)))
}
times1 = times2 = rep(NA, 1000)
for(i in 1:length(times1)){
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1[i] = T1
times2[i] = T2
}
tgrid = seq(min(times1), max(times1), length.out = 1000)
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times1))
plot(tgrid, Et)
plot(tgrid, expfunc(tgrid), col=2)
plot(tgrid, Et)
lines(tgrid, expfunc(tgrid), col=2)
expfunc(tgrid[1000])
lines(tgrid, 4*expfunc(tgrid), col=2)
expfunc = function(t){
return(0.5*(1 - exp(-2*alpha*t) + 1 - exp(-2*alpha*t) -
2*alpha*t*exp(-t*(alpha+beta))))
}
times1 = times2 = rep(NA, 1000)
for(i in 1:length(times1)){
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1[i] = T1
times2[i] = T2
}
tgrid = seq(min(times1), max(times1), length.out = 1000)
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times1))
plot(tgrid, Et)
lines(tgrid, expfunc(tgrid), col=2)
lines(tgrid, expfunc(tgrid), col=2, lwd=3)
############################################################
alpha=1
beta=2
expfunc = function(t, a, b){
if(a == b){
return(0.5*(2 - 2*exp(-2*a*t) - 2*a*t*exp(-t*(a+b))))
}else{
return(0.5*(2 - 2*exp(-2*a*t) -
2*a*exp(-t*(a+b))*(1 - exp(t*(b-a)))/(b-a)))
}
}
times1 = times2 = rep(NA, 1000)
for(i in 1:length(times1)){
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1[i] = T1
times2[i] = T2
}
tgrid = seq(min(times1), max(times1), length.out = 1000)
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times1))
plot(tgrid, Et)
lines(tgrid, expfunc(tgrid), col=2, lwd=3)
lines(tgrid, expfunc(tgrid, alpha, beta), col=2, lwd=3)
############################################################
alpha=2
beta=2
expfunc = function(t, a, b){
if(a == b){
return(0.5*(2 - 2*exp(-2*a*t) - 2*a*t*exp(-t*(a+b))))
}else{
return(0.5*(2 - 2*exp(-2*a*t) -
2*a*exp(-t*(a+b))*(1 - exp(t*(b-a)))/(b-a)))
}
}
times1 = times2 = rep(NA, 1000)
for(i in 1:length(times1)){
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1[i] = T1
times2[i] = T2
}
tgrid = seq(min(times1), max(times1), length.out = 1000)
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times1))
plot(tgrid, Et)
lines(tgrid, expfunc(tgrid, alpha, beta), col=2, lwd=3)
############################################################
alpha=1
beta=2
expfunc = function(t, a, b){
if(a == b){
return(0.5*(2 - 2*exp(-2*a*t) - 2*a*t*exp(-t*(a+b))))
}else{
return(0.5*(2 - 2*exp(-2*a*t) -
2*a*exp(-t*(a+b))*(exp(t*(b-a))-1)/(b-a)))
}
}
times1 = times2 = rep(NA, 1000)
for(i in 1:length(times1)){
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1[i] = T1
times2[i] = T2
}
tgrid = seq(min(times1), max(times1), length.out = 1000)
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times1))
plot(tgrid, Et)
lines(tgrid, expfunc(tgrid, alpha, beta), col=2, lwd=3)
############################################################
alpha=0.1
beta=2
expfunc = function(t, a, b){
if(a == b){
return(0.5*(2 - 2*exp(-2*a*t) - 2*a*t*exp(-t*(a+b))))
}else{
return(0.5*(2 - 2*exp(-2*a*t) -
2*a*exp(-t*(a+b))*(exp(t*(b-a))-1)/(b-a)))
}
}
times1 = times2 = rep(NA, 1000)
for(i in 1:length(times1)){
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1[i] = T1
times2[i] = T2
}
tgrid = seq(min(times1), max(times1), length.out = 1000)
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times1))
plot(tgrid, Et)
lines(tgrid, expfunc(tgrid, alpha, beta), col=2, lwd=3)
expfunc = function(t, a, b){
if(a == b){
term1 = t
}else{
term1 = (exp(t*(b-a))-1)/(b-a)
}
return(1 - exp(-2*a*t) - a*term1*exp(-t*(a+b)))
}
times1 = times2 = rep(NA, 1000)
for(i in 1:length(times1)){
draw1 = rexp(2, rate = alpha)
draw2 = rexp(1, rate = alpha+beta)
if(draw1[1] < draw1[2]){
T1 = draw1[1]
T2 = T1 + draw2
}else{
T2 = draw1[2]
T1 = T2 + draw2
}
times1[i] = T1
times2[i] = T2
}
tgrid = seq(min(times1), max(times1), length.out = 1000)
Et = sapply(tgrid, function(t) sum(times1 < t)/length(times1))
plot(tgrid, Et)
lines(tgrid, expfunc(tgrid, alpha, beta), col=2, lwd=3)
mjeff = function(x, s){
return((1/log(x/(x+s)))/(x+s))}
x1 = seq(0,10,0.01)
plot(x1, mjeff(x1, 1))
mjeff = function(x, xmax, xa){
return((1/(x+xa))*(1/log((xmax+xa)/xa)))
}
plot(x1,mjeff(x1, 10, 1))
plot(x1,mjeff(x1, 10, .1))
10/log(10.1/0.1) - 0.1
10/log(11/1) - 1
x = seq(0.0001, 5, 0.01)
plot(x, x)
points(x, log(x))
lines(x, (log(x)^(2/3))/(x^(2/3)) )
plot(x, (log(x)^(2/3))/(x^(2/3)) )
x = seq(0.001, 5, 0.01)
plot(x, log(x), type='l')
lines(x, x^{2/3})
g = function(x, K,e,nu){
return(exp(K(cos(x+nu) + e*cos(x))))
}
w = seq(-pi, pi, 0.01)
plot(w, g(w, 10,0.9,2*pi/3))
g = function(x, K,e,nu){
return(exp(K*(cos(x+nu) + e*cos(x))))
}
w = seq(-pi, pi, 0.01)
plot(w, g(w, 10,0.9,2*pi/3))
plot(w, g(w, 10,0.9,4*pi/3))
plot(w, g(w, 10,0.6,4*pi/3))
plot(w, g(w, 10,0.3,4*pi/3))
plot(w, g(w, 10,0.1,4*pi/3))
plot(w, g(w, 10,0.7,4*pi/3))
plot(w, g(w, 10,0.7,0))
plot(w, g(w, 10,0.7,pi))
plot(w, g(w, 10,0.9,pi))
plot(w, g(w, 10,0.9,2*pi/3))
lines(w, 10000*dnorm(w,-1,0.5))
lines(w, 14000*dnorm(w,-1.2,0.5))
lines(w, 14000*dnorm(w,-1.2,0.3))
plot(w, g(w, 10,0.9,2*pi/3))
lines(w, 12000*dnorm(w,-1.2,0.3))
lines(w, 10000*dnorm(w,-1.2,0.3))
lines(w, 10000*dnorm(w,-1.1,0.3))
plot(w, g(w, 10,0.9,2*pi/3))
lines(w, 10000*dnorm(w,-1.1,0.3))
lines(w, 10000*dnorm(w,-1.1,0.3), col=2)
lines(w, 10000*dnorm(w,-1.1,0.3), col=2, lwd=2)
plot(w, g(w, 10,0.9,2*pi/3))
lines(w, 10000*dnorm(w,-1.15,0.3), col=2, lwd=2)
lines(w, 11000*dnorm(w,-1.15,0.3), col=2, lwd=2)
lines(w, 10500*dnorm(w,-1.15,0.3), col=2, lwd=2)
plot(w, g(w, 10,0.9,2*pi/3))
lines(w, 10000*dnorm(w,-1.15,0.32), col=2, lwd=2)
lines(w, 10500*dnorm(w,-1.15,0.32), col=2, lwd=2)
lines(w, 10500*dnorm(w,-1.15,0.35), col=2, lwd=2)
plot(w, g(w, 10,0.9,2*pi/3))
lines(w, 10500*dnorm(w,-1.15,0.35), col=2, lwd=2)
lines(w, 11000*dnorm(w,-1.15,0.35), col=2, lwd=2)
lines(w, 12000*dnorm(w,-1.15,0.35), col=2, lwd=2)
plot(w, g(w, 10,0.9,2*pi/3))
lines(w, 12000*dnorm(w,-1.15,0.35), col=2, lwd=2)
plot(w, g(w, 10,0.9,pi/6))
lines(w, 12000*dnorm(w,-1.15,0.35), col=2, lwd=2)
plot(w, g(w, 10,0.9,5*pi/6))
lines(w, 12000*dnorm(w,-1.15,0.35), col=2, lwd=2)
plot(w, g(w, 10,0.9,10*pi/11))
g = function(x, a1,b1,a2,b2){
return(exp(a1*cos(x) + b1*sin(x)+a2*cos(2x)+b2*sin(2x)))
}
g = function(x, a1,b1,a2,b2){
return(exp(a1*cos(x) + b1*sin(x)+a2*cos(2*x)+b2*sin(2*x)))
}
w = seq(-2*pi, 2*pi, 0.01)
plot(w, g(w, 1,1,1,1))
plot(w, g(w, 1,-1,1,1))
plot(w, g(w, 1,-1,0,1))
devtools::install_github("metacran/cranlogs")
?cran_downloads
??cran_downloads
cranlog::cran_downloads(packages = c("rvmethod"))
cranlogs::cran_downloads(packages = c("rvmethod"))
cranlogs::cran_downloads(when = "last-month", packages = c("rvmethod"))
library(cranlogs)
?cranlogs
?cran_downloads
cran_downloads(packages = "rvmethod", from = "2020-01-01", to = "2020-12-23")
cran_downloads(packages = "rvmethod", from = "2020-01-01", to = "2020-12-23") -> df
names(df)
sum(df$count)
library(rvmethod)
?estimate_template
seq(1,6,length.out = 5)
rv = 1000
sqrt((1+rv/299792458)/(1-rv/299792458))
1 + rv/299792458
rv = 165000
sqrt((1+rv/299792458)/(1-rv/299792458))
1 + rv/299792458
?approxfun
approx(c(1,2,3,4,5), c(3,2,1,2,3), c(1.5, 2.5, 3.5, 4.5))
setwd("Desktop/AstronomyResearch/safe_statistic/SimulationStudies/SAFE_Timecor/")
ls
list.files()
df = read.csv("timecorssim_SAFE.csv")
dim(df)
names(df)
sd(df$b1)
these = 2*c(1:183)
2*183
sd(df$b1[these])
sd(df$b1[these+1])
these2 = these - 1
sd(df$b1[these2])
df2 = df2[these2,]
df2 = df[these2,]
which(df2$Pvals <= 0.001/dim(df2)[1])
keep = which(df2$Pvals >= 0.001/dim(df2)[1])
sd(df2$b1)
sd(df2$b1[keep])
